// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  READER
  AUTHOR
  ADMIN
}

enum PostStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String    @unique
  password      String
  role          UserRole  @default(READER)
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  slug           String     @unique
  title          String
  excerpt        String
  content        String
  coverImage     String?
  category       String
  tags           String[]
  status         PostStatus @default(DRAFT)
  publishedAt    DateTime?
  rejectionNote  String?
  viewCount      Int        @default(0)
  readingTime    String     @default("5 min read")
  
  authorId       String     @db.ObjectId
  author         User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  comments       Comment[]
  
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([status, publishedAt])
  @@index([authorId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  approved  Boolean  @default(false)
  
  postId    String   @db.ObjectId
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([authorId])
}
